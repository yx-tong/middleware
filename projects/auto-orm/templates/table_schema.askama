use sqlx::{FromRow, Pool, Postgres, Row, Error};

pub struct {{ self.entity_name() }};

impl sqlx_orm::EntityTrait for {{ self.entity_name() }} {

}

#[derive(FromRow)]
pub struct {{ self.read_name() }} {
{%- for column in self.table.columns %}
	/// {{ column.comment }}
    pub {{ column.name.to_lowercase() }}: {{ column.select_type() }},
{%- endfor %}
}

impl {{ self.read_name() }} {
    pub async fn find_by(key: String, db: &Pool<Postgres>) -> Result<Self, Error> {
        sqlx::query_as(r#"SELECT * FROM public.advertisement_info WHERE advertise_id = $1 LIMIT 1"#)
            .bind(key)
            .fetch_one(db)
            .await
    }
    pub async fn find_many(db: &Pool<Postgres>, limit: u64) -> Result<Vec<Self>, Error> {
        sqlx::query_as(r#"SELECT * FROM public.advertisement_info LIMIT $1"#)
            .bind(limit as i64)
            .fetch_all(db)
            .await
    }
}

{%- for key in self.table.unique_keys() %}
pub struct {{ key.struct_name() }};

impl {{ key.struct_name() }} {
    pub async fn read_one(key: sqlx::types::Uuid, db: &Pool<Postgres>) -> Result<{{ self.read_name() }}, Error> {
        sqlx::query_as(r#"SELECT * FROM {{ key.full_table() }} WHERE {{ key.full_column() }} = $1 LIMIT 1"#).bind(key).fetch_one(db).await
    }
    pub async fn read_all(key: &[sqlx::types::Uuid], db: &Pool<Postgres>) -> Result<Vec<{{ self.read_name() }}>, Error> {
        sqlx::query_as(r#"SELECT * FROM {{ key.full_table() }} WHERE {{ key.full_column() }} = ANY($1)"#).bind(key).fetch_all(db).await
    }
}
{%- endfor %}

